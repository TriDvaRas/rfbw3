/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/assets/models/tile.gltf --transform -t
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useControls } from 'leva'

type GLTFResult = GLTF & {
  nodes: {
    Cylinder: THREE.Mesh
    Grass: THREE.Mesh
    Base001_cell001_cell010: THREE.Mesh
    Base001_cell001_cell010_1: THREE.Mesh
  }
  materials: {
    Dirt: THREE.MeshPhysicalMaterial
    Grass: THREE.MeshPhysicalMaterial
    DirtInner: THREE.MeshPhysicalMaterial
  }
}




const GrassMaterial = new THREE.MeshStandardMaterial({
  color: "#4dff00",
})
const DirtMaterial = new THREE.MeshStandardMaterial({
  color: "#ffa600",
})
const DirtInnerMaterial = new THREE.MeshStandardMaterial({
  color: "#a15e40",
})






type Props = JSX.IntrinsicElements['group'] & {
  position?: [number, number, number]
}

export function Tile(props: Props) {
  const { nodes, materials } = useGLTF('/tile-transformed.glb') as GLTFResult
  console.log(materials);
  const refGrass = useRef<THREE.Mesh>(null!)
  const refDirt = useRef<THREE.Mesh>(null!)
  const refDirtInner = useRef<THREE.Mesh>(null!)
  // useControls('Grass', {
  //   color: {
  //     value: "#" + GrassMaterial.color.getHexString(),
  //     onChange: (v) => {
  //       (refGrass.current.material as THREE.MeshPhysicalMaterial).color = new THREE.Color(v)
  //     },
  //   },
  // })
  // useControls('Dirt', {
  //   color: {
  //     value: "#" + DirtMaterial.color.getHexString(),
  //     onChange: (v) => {
  //       (refDirt.current.material as THREE.MeshPhysicalMaterial).color = new THREE.Color(v)
  //     },
  //   },
  // })
  // useControls('InnerDirt', {
  //   color: {
  //     value: "#" + DirtInnerMaterial.color.getHexString(),
  //     onChange: (v) => {
  //       (refDirtInner.current.material as THREE.MeshPhysicalMaterial).color = new THREE.Color(v)
  //     },
  //   },
  // })
  return (
    <group {...props} dispose={null} castShadow receiveShadow >
      {/* Grass */}
      <mesh geometry={nodes.Grass.geometry} ref={refGrass} material={GrassMaterial} castShadow />
      {/* <mesh geometry={nodes.Grass.geometry} material={new THREE.MeshToonMaterial()} /> */}
      {/* topper */}
      <mesh geometry={nodes.Cylinder.geometry} material={DirtMaterial} rotation={[0, -Math.PI / 6, 0]} castShadow receiveShadow/>

      <group position={[0.456, -0.142, -0.736]} rotation={[0.198, 0.156, -0.234]} scale={0.828}>
        <mesh geometry={nodes.Base001_cell001_cell010.geometry} ref={refDirt} material={DirtMaterial} castShadow receiveShadow />
        <mesh geometry={nodes.Base001_cell001_cell010_1.geometry} ref={refDirtInner} material={DirtInnerMaterial} castShadow receiveShadow/>
      </group>
    </group>
  )
}

useGLTF.preload('/tile-transformed.glb')
