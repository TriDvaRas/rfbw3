// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    player        Player[]
    images        Image[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Player {
    id        String   @id @db.Uuid
    addedById String   @db.Uuid
    about     String   @default("Я играю в футбол")
    name      String   @db.VarChar(64)
    imageId   String?  @db.Uuid
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)

    user   User    @relation(fields: [userId], references: [id])
    userId String
    fields Field[]
}

model Field {
    id        String   @id @db.Uuid
    name      String   @db.VarChar(64)
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)

    player   Player @relation(fields: [playerId], references: [id])
    playerId String @db.Uuid

    tiles Tile[]
}

model Tile {
    id        String   @id @db.Uuid
    name      String   @db.VarChar(64)
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)

    field   Field  @relation(fields: [fieldId], references: [id])
    fieldId String @db.Uuid
}

model Image {
    key       String   @id
    createdAt DateTime @db.Timestamptz(6)
    updatedAt DateTime @db.Timestamptz(6)

    name String
    url  String
    size Int

    addedBy   User   @relation(fields: [addedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
    addedById String
}

model Content {
    id             String  @id @db.Uuid
    addedById      String  @db.Uuid
    ownedById      String  @db.Uuid
    label          String  @default("Название") @db.VarChar(16)
    title          String  @default("Длинное название") @db.VarChar(128)
    altColor       String  @default("#2b2744") @db.VarChar(10)
    fontColor      String  @default("#ffffff") @db.VarChar(10)
    hours          Decimal @default(0) @db.Decimal(3, 1)
    deleted        Boolean @default(false)
    imageId        String?
    hasCoop        Boolean @default(false)
    maxCoopPlayers Int     @default(1)
    hasDifficulty  Boolean @default(false)

    createdAt    DateTime @db.Timestamptz(6)
    updatedAt    DateTime @db.Timestamptz(6)
    endCondition String   @default("")
}
