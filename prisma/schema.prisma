// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "postgres"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

//!  Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                 String     @id @default(cuid())
    name               String
    email              String?    @unique
    emailVerified      DateTime?
    image              String?
    canBecomePlayer    Boolean    @default(false)
    roles              UserRole[] @default([USER])
    applicationComment String?

    accounts Account[]
    sessions Session[]
    player   Player[]
    images   Image[]
}

enum UserRole {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//! master Graph
model Tile {
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    location    String   @id @unique @default("0,0")
    connectedTo String[] @default([])
    windows     String[]
    robots      String[]
    buildings   String[]

    playerTiles PlayerTile[]
}

//!

//! gamedata
model Player {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    addedById String

    about     String @default("Я играю в футбол")
    name      String @db.VarChar(64)
    fieldRoot String

    imageUrl String?
    userId   String  @unique
    image    Image?  @relation(fields: [imageUrl], references: [url])
    user     User    @relation(fields: [userId], references: [id])

    //misc 
    canDoGaming Boolean @default(false)

    // stats
    points     Int @default(0)
    money      Int @default(0)
    animeSlots Int @default(1)
    movieSlots Int @default(1)
    gameSlots  Int @default(1)
    coopSlots  Int @default(2)

    // settings
    isRussian  Boolean          @default(false)
    sphereType PlayerSphereType @default(sphere)

    playerTiles     PlayerTile[]
    playerContents  PlayerContent[]
    coops           Coop[]
    coopInvites     CoopInvite[]
    addedContent    Content[]       @relation("AddedContent")
    ownedContent    Content[]       @relation("OwnedContent")
    weightMods      WeightMods[]
    Entropy         Entropy[]
    sourcingEvents  Event[]         @relation("eventSourcePlayer")
    targetingEvents Event[]         @relation("eventTargetPlayer")
}

enum PlayerSphereType {
    sphere
    pyramid
    octahedron
    cube
}

model PlayerTile {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    type              PlayerTileType
    hardConnectedTo   String[]       @default([])
    allowsContentType ContentType?

    playerId        String         @db.Uuid
    tileId          String
    playerContentId String?        @db.Uuid
    player          Player         @relation(fields: [playerId], references: [id])
    tile            Tile           @relation(fields: [tileId], references: [location])
    playerContent   PlayerContent? @relation(fields: [playerContentId], references: [id])
}

enum PlayerTileType {
    start
    border
    field
}

model PlayerContent {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    source PlayerContentSource
    status PlayerContentStatus

    playerId     String       @db.Uuid
    contentId    String       @db.Uuid
    playerTileId String?      @db.Uuid
    coopId       String?      @db.Uuid
    player       Player       @relation(fields: [playerId], references: [id])
    content      Content      @relation(fields: [contentId], references: [id])
    coop         Coop?        @relation(fields: [coopId], references: [id])
    playerTiles  PlayerTile[]
}

enum PlayerContentSource {
    field
    invite
}

enum PlayerContentStatus {
    inProgress
    completed
    dropped
    rerolled
}

model Coop {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    ownerId             String          @db.Uuid
    contentId           String          @db.Uuid
    content             Content         @relation(fields: [contentId], references: [id])
    owner               Player          @relation(fields: [ownerId], references: [id])
    coopInvites         CoopInvite[]
    childPlayerContents PlayerContent[]
    events              Event[]
}

model CoopInvite {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    coopId     String           @db.Uuid
    receiverId String           @db.Uuid
    coop       Coop             @relation(fields: [coopId], references: [id])
    receiver   Player           @relation(fields: [receiverId], references: [id])
    result     CoopInviteResult
}

enum CoopInviteResult {
    pending
    accepted
    declined
}

//!

model Image {
    url          String       @id @unique
    createdAt    DateTime     @default(now()) @db.Timestamptz(6)
    uploadStatus UploadStatus @default(PENDING)

    addedBy   User      @relation(fields: [addedById], references: [id], onDelete: Cascade, onUpdate: NoAction)
    addedById String
    players   Player[]
    contents  Content[]
}

enum UploadStatus {
    PENDING
    UPLOADED
    FAILED
}

model Content {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)
    addedById String   @db.Uuid
    ownedById String   @db.Uuid

    type           ContentType
    label          String         @db.VarChar(16)
    title          String         @db.VarChar(128)
    hours          Decimal        @db.Decimal(3, 1)
    deleted        Boolean        @default(false)
    imageId        String
    hasCoop        Boolean        @default(false)
    maxCoopPlayers Int            @default(1)
    genres         ContentGenre[] @default([])
    comments       String         @default("")

    baseWeight Int @default(100)

    approved     Boolean @default(false)
    fixRequested Boolean @default(false)
    fixReason    String  @default("")
    endCondition String  @default("")

    addedBy Player @relation("AddedContent", fields: [addedById], references: [id])
    owner   Player @relation("OwnedContent", fields: [ownedById], references: [id])
    image   Image  @relation(fields: [imageId], references: [url])

    playerContents PlayerContent[]
    coops          Coop[]
    DLCs           ContentDLC[]
    weightMods     WeightMods[]

    sourcingEvents  Event[] @relation("eventSourceContent")
    targetingEvents Event[] @relation("eventTargetContent")
}

enum ContentType {
    game
    movie
    anime
}

model ContentDLC {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    hours        Decimal @default(0) @db.Decimal(3, 1)
    label        String  @default("Название") @db.VarChar(16)
    title        String  @default("Длинное название") @db.VarChar(128)
    endCondition String  @default("")
    position     Int     @default(0)

    contentId String  @db.Uuid
    content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
}

enum ContentGenre {
    action
    adventure
    cars
    comedy
    crime
    documentary
    drama
    ecchi
    family
    fantasy
    fighting
    game
    harem
    historical
    history
    horror
    kids
    magic
    mecha
    military
    music
    mystery
    parody
    platform
    police
    psychological
    puzzle
    quiz_trivia
    racing
    romance
    rpg
    school
    sci_fi
    shooter
    simulator
    slasher
    slice_of_life
    space
    sport
    sports
    strategy
    super_power
    supernatural
    thriller
    turn_based
    vampire
    war
    western
    yaoi
    yuri
}

model WeightMods {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    contentId String        @db.Uuid
    content   Content       @relation(fields: [contentId], references: [id], onDelete: Cascade)
    type      WeightModType

    name       String
    multiplier Float  @default(1)

    isValid      Boolean                 @default(true)
    invalidateAt DateTime?               @db.Timestamptz(6)
    invalidateOn WeightModInvalidateOn[] @default([])

    playerId String? @db.Uuid
    player   Player? @relation(fields: [playerId], references: [id], onDelete: Cascade)
}

enum WeightModType {
    global
    player
}

enum WeightModInvalidateOn {
    contentRoll
    contentDrop
    contentComplete
    contentDropOrComplete
    contentReroll
    contentRerollOrDrop
    contentRerollOrComplete
    contentRerollOrCompleteOrDrop
    shopBuy
}

model Entropy {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    sourcePlayerId String @db.Uuid
    sourcePlayer   Player @relation(fields: [sourcePlayerId], references: [id], onDelete: Cascade)

    entropy Int @default(0)
}

//event feed
model Event {
    id        String   @id @default(uuid()) @db.Uuid
    createdAt DateTime @default(now()) @db.Timestamptz(6)
    updatedAt DateTime @updatedAt @db.Timestamptz(6)

    type    EventType
    altText String 

    pointsDelta Int?
    moneyDelta  Int?
    entropyDelta Int?

    sourcePlayerId String? @db.Uuid
    sourcePlayer   Player? @relation("eventSourcePlayer", fields: [sourcePlayerId], references: [id], onDelete: Cascade)
    targetPlayerId String? @db.Uuid
    targetPlayer   Player? @relation("eventTargetPlayer", fields: [targetPlayerId], references: [id], onDelete: Cascade)

    sourceContentId String?  @db.Uuid
    sourceContent   Content? @relation("eventSourceContent", fields: [sourceContentId], references: [id], onDelete: Cascade)
    targetContentId String?  @db.Uuid
    targetContent   Content? @relation("eventTargetContent", fields: [targetContentId], references: [id], onDelete: Cascade)

    coopId String? @db.Uuid
    coop   Coop?   @relation(fields: [coopId], references: [id], onDelete: Cascade)
}

enum EventType {
    // content progress
    contentRolled
    contentFinished
    contentRerolled
    contentDropped
    
    // coop progress
    coopCreated
    coopJoin
    coopLeave
    coopEnd

    // shop
    //TODO

    // truth
    //TODO

    // achievements
    //TODO

    // items
    //TODO

    // admin
    adminPointsAdded
    adminMoneyAdded
    adminPointsRemoved
    adminMoneyRemoved

    //misc
    invalidEvent
}
